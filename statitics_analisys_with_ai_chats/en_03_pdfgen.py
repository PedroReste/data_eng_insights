# en_03_pdfgen.py
import os
import base64
from io import BytesIO
from fpdf import FPDF
import plotly.io as pio
import pandas as pd
from datetime import datetime
from PIL import Image
import traceback

class PDFReportGenerator:
    def __init__(self):
        self.pdf = None
    
    def convert_plotly_to_image(self, fig):
        """Convert Plotly figure to PIL Image"""
        try:
            img_bytes = pio.to_image(fig, format='png', width=800, height=500, scale=1)
            image = Image.open(BytesIO(img_bytes))
            return image
        except Exception as e:
            print(f"Error converting plotly figure: {e}")
            return None
    
    def create_pdf_report(self, results, dataset_name):
        """Create a comprehensive PDF report using FPDF2"""
        try:
            print("Starting PDF creation...")
            
            # Create PDF
            pdf = FPDF()
            pdf.set_auto_page_break(auto=True, margin=15)
            print("PDF object created")
            
            # Add cover page
            self._add_cover_page(pdf, dataset_name, results)
            print("Cover page added")
            
            # Add table of contents
            self._add_table_of_contents(pdf)
            print("Table of contents added")
            
            # Add dataset overview
            self._add_dataset_overview(pdf, results)
            print("Dataset overview added")
            
            # Add statistics
            self._add_statistics(pdf, results)
            print("Statistics added")
            
            # Add AI insights
            self._add_ai_insights(pdf, results)
            print("AI insights added")
            
            # Add visualizations if available
            if 'visualizations' in results and results['visualizations']:
                self._add_visualizations(pdf, results)
                print("Visualizations added")
            
            # Get PDF bytes
            pdf_bytes = pdf.output(dest='S')
            print(f"PDF generated successfully, size: {len(pdf_bytes)} bytes")
            
            return pdf_bytes
            
        except Exception as e:
            print(f"Error creating PDF: {e}")
            print(f"Traceback: {traceback.format_exc()}")
            raise Exception(f"PDF creation failed: {str(e)}")
    
    def _clean_text(self, text):
        """Remove emojis and unsupported characters from text"""
        if not text:
            return ""
        
        try:
            # Remove emojis and special characters, keep only basic ASCII and common symbols
            import re
            # Keep letters, numbers, basic punctuation, and spaces
            cleaned = re.sub(r'[^\x00-\x7F]+', ' ', str(text))
            # Replace multiple spaces with single space
            cleaned = re.sub(r'\s+', ' ', cleaned)
            return cleaned.strip()
        except Exception as e:
            print(f"Error cleaning text: {e}")
            return str(text)[:100]  # Return first 100 chars as fallback
    
    def _add_cover_page(self, pdf, dataset_name, results):
        """Add cover page to PDF"""
        pdf.add_page()
        
        # Title
        pdf.set_font('Arial', 'B', 24)
        pdf.cell(0, 40, 'Data Analysis Report', 0, 1, 'C')
        
        # Subtitle
        pdf.set_font('Arial', 'I', 16)
        pdf.cell(0, 20, 'Generated by AI Data Analyzer', 0, 1, 'C')
        
        # Dataset info
        pdf.set_font('Arial', '', 12)
        pdf.ln(20)
        pdf.cell(0, 10, f'Dataset: {self._clean_text(dataset_name)}', 0, 1, 'C')
        
        df = results['dataframe']
        pdf.cell(0, 10, f'Shape: {df.shape[0]} rows x {df.shape[1]} columns', 0, 1, 'C')
        pdf.cell(0, 10, f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', 0, 1, 'C')
        
        # Add some spacing
        pdf.ln(30)
        
        # Summary stats
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Dataset Summary', 0, 1, 'C')
        pdf.set_font('Arial', '', 12)
        
        stats = [
            f"Total Rows: {df.shape[0]:,}",
            f"Total Columns: {df.shape[1]}",
            f"Missing Values: {df.isnull().sum().sum():,}",
            f"Duplicated Rows: {df.duplicated().sum():,}"
        ]
        
        for stat in stats:
            pdf.cell(0, 8, stat, 0, 1, 'C')
    
    def _add_table_of_contents(self, pdf):
        """Add table of contents"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Table of Contents', 0, 1)
        pdf.ln(10)
        
        pdf.set_font('Arial', '', 12)
        contents = [
            "1. Dataset Overview",
            "2. Descriptive Statistics", 
            "3. AI Insights & Analysis",
            "4. Key Visualizations"
        ]
        
        for item in contents:
            pdf.cell(0, 8, item, 0, 1)
            pdf.ln(5)
    
    def _add_dataset_overview(self, pdf, results):
        """Add dataset overview section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '1. Dataset Overview', 0, 1)
        pdf.ln(10)
        
        df = results['dataframe']
        
        # Basic stats
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Basic Information:', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        info_lines = [
            f"Dataset Shape: {df.shape[0]} rows x {df.shape[1]} columns",
            f"Total Cells: {df.shape[0] * df.shape[1]:,}",
            f"Missing Values: {df.isnull().sum().sum():,}",
            f"Duplicate Rows: {df.duplicated().sum():,}",
            f"Memory Usage: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB"
        ]
        
        for line in info_lines:
            pdf.cell(0, 6, line, 0, 1)
        
        pdf.ln(10)
        
        # Data types
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Data Types:', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        numerical_count = len(df.select_dtypes(include=['number']).columns)
        categorical_count = len(df.select_dtypes(include=['object', 'category']).columns)
        boolean_count = len(df.select_dtypes(include=['bool']).columns)
        datetime_count = len(df.select_dtypes(include=['datetime']).columns)
        
        type_lines = [
            f"Numerical Columns: {numerical_count}",
            f"Categorical Columns: {categorical_count}", 
            f"Boolean Columns: {boolean_count}",
            f"Date/Time Columns: {datetime_count}"
        ]
        
        for line in type_lines:
            pdf.cell(0, 6, line, 0, 1)
        
        pdf.ln(10)
        
        # Column list (show first 20 columns only)
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Columns (first 20):', 0, 1)
        pdf.set_font('Arial', '', 8)
        
        for i, col in enumerate(df.columns[:20], 1):
            col_type = str(df[col].dtype)
            clean_col = self._clean_text(str(col))
            pdf.cell(0, 5, f"{i}. {clean_col} ({col_type})", 0, 1)
        
        if len(df.columns) > 20:
            pdf.cell(0, 5, f"... and {len(df.columns) - 20} more columns", 0, 1)
    
    def _add_statistics(self, pdf, results):
        """Add descriptive statistics section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '2. Descriptive Statistics', 0, 1)
        pdf.ln(10)
        
        if 'statistics' not in results:
            pdf.set_font('Arial', 'I', 12)
            pdf.cell(0, 10, 'No statistics available.', 0, 1)
            return
        
        # Add a simplified version of statistics
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Key Statistics Summary:', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        df = results['dataframe']
        
        # Add numerical columns summary
        numerical_cols = df.select_dtypes(include=['number']).columns
        if len(numerical_cols) > 0:
            pdf.set_font('Arial', 'B', 11)
            pdf.cell(0, 8, 'Numerical Columns:', 0, 1)
            pdf.set_font('Arial', '', 9)
            
            for col in numerical_cols[:5]:  # Limit to first 5 numerical columns
                pdf.cell(0, 5, f"- {self._clean_text(col)}: Mean={df[col].mean():.2f}, Std={df[col].std():.2f}", 0, 1)
            
            if len(numerical_cols) > 5:
                pdf.cell(0, 5, f"... and {len(numerical_cols) - 5} more numerical columns", 0, 1)
        
        pdf.ln(5)
        
        # Add categorical columns summary
        categorical_cols = df.select_dtypes(include=['object', 'category']).columns
        if len(categorical_cols) > 0:
            pdf.set_font('Arial', 'B', 11)
            pdf.cell(0, 8, 'Categorical Columns:', 0, 1)
            pdf.set_font('Arial', '', 9)
            
            for col in categorical_cols[:3]:  # Limit to first 3 categorical columns
                unique_count = df[col].nunique()
                pdf.cell(0, 5, f"- {self._clean_text(col)}: {unique_count} unique values", 0, 1)
            
            if len(categorical_cols) > 3:
                pdf.cell(0, 5, f"... and {len(categorical_cols) - 3} more categorical columns", 0, 1)
    
    def _add_ai_insights(self, pdf, results):
        """Add AI insights section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '3. AI Insights & Analysis', 0, 1)
        pdf.ln(10)
        
        if 'ai_analysis' not in results or not results['ai_analysis']:
            pdf.set_font('Arial', 'I', 12)
            pdf.cell(0, 10, 'No AI analysis available.', 0, 1)
            return
        
        insights_text = results['ai_analysis']
        
        # Extract main sections
        sections = self._extract_sections(insights_text)
        
        # Add executive summary if available
        if sections['Executive Summary']:
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 8, 'Executive Summary:', 0, 1)
            pdf.set_font('Arial', '', 10)
            
            summary = self._clean_text(sections['Executive Summary'])
            if len(summary) > 500:
                summary = summary[:500] + "..."
            pdf.multi_cell(0, 6, summary)
            pdf.ln(5)
        
        # Add recommendations if available
        if sections['Recommendations']:
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 8, 'Key Recommendations:', 0, 1)
            pdf.set_font('Arial', '', 10)
            
            recommendations = self._clean_text(sections['Recommendations'])
            if len(recommendations) > 300:
                recommendations = recommendations[:300] + "..."
            pdf.multi_cell(0, 6, recommendations)
    
    def _extract_sections(self, text):
        """Extract sections from AI analysis text"""
        sections = {
            'Executive Summary': '',
            'Statistical Analysis': '',
            'Pattern Identification': '',
            'Business Implications': '',
            'Recommendations': ''
        }
        
        current_section = None
        lines = text.split('\n')
        
        for line in lines:
            line_stripped = line.strip()
            
            # Check for section headers
            if any(header in line_stripped.lower() for header in ['executive summary', 'summary']):
                current_section = 'Executive Summary'
                continue
            elif any(header in line_stripped.lower() for header in ['statistical analysis', 'detailed analysis']):
                current_section = 'Statistical Analysis'
                continue
            elif any(header in line_stripped.lower() for header in ['pattern identification', 'patterns']):
                current_section = 'Pattern Identification'
                continue
            elif any(header in line_stripped.lower() for header in ['business implications', 'implications']):
                current_section = 'Business Implications'
                continue
            elif any(header in line_stripped.lower() for header in ['recommendations', 'suggestions']):
                current_section = 'Recommendations'
                continue
            
            # Add content to current section
            if current_section and line_stripped:
                sections[current_section] += line + '\n'
        
        return sections
    
    def _add_visualizations(self, pdf, results):
        """Add visualizations section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '4. Key Visualizations', 0, 1)
        pdf.ln(10)
        
        visualizations = results['visualizations']
        added_viz = 0
        
        # Try to add data types chart
        if 'data_types' in visualizations:
            try:
                fig = visualizations['data_types']
                image = self.convert_plotly_to_image(fig)
                
                if image:
                    # Resize image
                    image.thumbnail((150, 100), Image.Resampling.LANCZOS)
                    
                    # Save image to bytes
                    img_buffer = BytesIO()
                    image.save(img_buffer, format='PNG')
                    img_buffer.seek(0)
                    
                    # Add to PDF
                    pdf.set_font('Arial', 'B', 10)
                    pdf.cell(0, 8, 'Data Types Distribution', 0, 1, 'C')
                    pdf.image(img_buffer, x=30, w=150)
                    pdf.ln(60)
                    added_viz += 1
            except Exception as e:
                print(f"Error adding data types chart: {e}")
        
        # Try to add correlation heatmap
        if 'correlation_heatmap' in visualizations and added_viz < 2:
            try:
                fig = visualizations['correlation_heatmap']
                image = self.convert_plotly_to_image(fig)
                
                if image:
                    # Resize image
                    image.thumbnail((150, 100), Image.Resampling.LANCZOS)
                    
                    # Save image to bytes
                    img_buffer = BytesIO()
                    image.save(img_buffer, format='PNG')
                    img_buffer.seek(0)
                    
                    # Add to PDF
                    pdf.set_font('Arial', 'B', 10)
                    pdf.cell(0, 8, 'Correlation Matrix', 0, 1, 'C')
                    pdf.image(img_buffer, x=30, w=150)
                    added_viz += 1
            except Exception as e:
                print(f"Error adding correlation heatmap: {e}")
    
    def generate_pdf_report(self, results, dataset_name, include_visualizations=True):
        """Main method to generate PDF report"""
        try:
            print(f"Starting PDF generation for dataset: {dataset_name}")
            pdf_bytes = self.create_pdf_report(results, dataset_name)
            
            if pdf_bytes and len(pdf_bytes) > 500:  # Reduced threshold
                print(f"PDF generated successfully: {len(pdf_bytes)} bytes")
                return pdf_bytes
            else:
                print(f"PDF too small or empty: {len(pdf_bytes) if pdf_bytes else 0} bytes")
                return None
                
        except Exception as e:
            print(f"Error in generate_pdf_report: {e}")
            print(f"Traceback: {traceback.format_exc()}")
            raise