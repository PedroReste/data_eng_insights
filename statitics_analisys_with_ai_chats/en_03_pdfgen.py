# en_03_pdfgen.py
import os
import base64
from io import BytesIO
from fpdf import FPDF
import plotly.io as pio
import pandas as pd
from datetime import datetime
from PIL import Image

class PDFReportGenerator:
    def __init__(self):
        self.pdf = None
    
    def convert_plotly_to_image(self, fig):
        """Convert Plotly figure to PIL Image"""
        try:
            img_bytes = pio.to_image(fig, format='png', width=800, height=500, scale=1)
            image = Image.open(BytesIO(img_bytes))
            return image
        except Exception as e:
            print(f"Error converting plotly figure: {e}")
            return None
    
    def create_pdf_report(self, results, dataset_name):
        """Create a comprehensive PDF report using FPDF2"""
        try:
            # Create PDF
            pdf = FPDF()
            pdf.set_auto_page_break(auto=True, margin=15)
            
            # Add cover page
            self._add_cover_page(pdf, dataset_name, results)
            
            # Add table of contents
            self._add_table_of_contents(pdf)
            
            # Add dataset overview
            self._add_dataset_overview(pdf, results)
            
            # Add statistics
            self._add_statistics(pdf, results)
            
            # Add AI insights
            self._add_ai_insights(pdf, results)
            
            # Add visualizations if available
            if 'visualizations' in results and results['visualizations']:
                self._add_visualizations(pdf, results)
            
            # Add footer to all pages
            pdf.alias_nb_pages()
            
            # Get PDF bytes
            pdf_bytes = pdf.output(dest='S').encode('latin-1')
            return pdf_bytes
            
        except Exception as e:
            print(f"Error creating PDF: {e}")
            raise Exception(f"PDF creation failed: {str(e)}")
    
    def _add_cover_page(self, pdf, dataset_name, results):
        """Add cover page to PDF"""
        pdf.add_page()
        
        # Title
        pdf.set_font('Arial', 'B', 24)
        pdf.cell(0, 40, 'Data Analysis Report', 0, 1, 'C')
        
        # Subtitle
        pdf.set_font('Arial', 'I', 16)
        pdf.cell(0, 20, 'Generated by AI Data Analyzer', 0, 1, 'C')
        
        # Dataset info
        pdf.set_font('Arial', '', 12)
        pdf.ln(20)
        pdf.cell(0, 10, f'Dataset: {dataset_name}', 0, 1, 'C')
        
        df = results['dataframe']
        pdf.cell(0, 10, f'Shape: {df.shape[0]} rows × {df.shape[1]} columns', 0, 1, 'C')
        pdf.cell(0, 10, f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', 0, 1, 'C')
        
        # Add some spacing
        pdf.ln(30)
        
        # Summary stats
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Dataset Summary', 0, 1, 'C')
        pdf.set_font('Arial', '', 12)
        
        stats = [
            f"Total Rows: {df.shape[0]:,}",
            f"Total Columns: {df.shape[1]}",
            f"Missing Values: {df.isnull().sum().sum():,}",
            f"Duplicated Rows: {df.duplicated().sum():,}"
        ]
        
        for stat in stats:
            pdf.cell(0, 8, stat, 0, 1, 'C')
    
    def _add_table_of_contents(self, pdf):
        """Add table of contents"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Table of Contents', 0, 1)
        pdf.ln(10)
        
        pdf.set_font('Arial', '', 12)
        contents = [
            "1. Dataset Overview",
            "2. Descriptive Statistics", 
            "3. AI Insights & Analysis",
            "4. Key Visualizations"
        ]
        
        for item in contents:
            pdf.cell(0, 8, item, 0, 1)
            pdf.ln(5)
    
    def _add_dataset_overview(self, pdf, results):
        """Add dataset overview section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '1. Dataset Overview', 0, 1)
        pdf.ln(10)
        
        df = results['dataframe']
        
        # Basic stats
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Basic Information:', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        info_lines = [
            f"Dataset Shape: {df.shape[0]} rows × {df.shape[1]} columns",
            f"Total Cells: {df.shape[0] * df.shape[1]:,}",
            f"Missing Values: {df.isnull().sum().sum():,}",
            f"Duplicate Rows: {df.duplicated().sum():,}",
            f"Memory Usage: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB"
        ]
        
        for line in info_lines:
            pdf.cell(0, 6, line, 0, 1)
        
        pdf.ln(10)
        
        # Data types
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Data Types:', 0, 1)
        pdf.set_font('Arial', '', 10)
        
        numerical_count = len(df.select_dtypes(include=['number']).columns)
        categorical_count = len(df.select_dtypes(include=['object', 'category']).columns)
        boolean_count = len(df.select_dtypes(include=['bool']).columns)
        datetime_count = len(df.select_dtypes(include=['datetime']).columns)
        
        type_lines = [
            f"Numerical Columns: {numerical_count}",
            f"Categorical Columns: {categorical_count}", 
            f"Boolean Columns: {boolean_count}",
            f"Date/Time Columns: {datetime_count}"
        ]
        
        for line in type_lines:
            pdf.cell(0, 6, line, 0, 1)
        
        pdf.ln(10)
        
        # Column list
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, 'Columns:', 0, 1)
        pdf.set_font('Arial', '', 8)
        
        for i, col in enumerate(df.columns, 1):
            col_type = str(df[col].dtype)
            pdf.cell(0, 5, f"{i}. {col} ({col_type})", 0, 1)
    
    def _add_statistics(self, pdf, results):
        """Add descriptive statistics section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '2. Descriptive Statistics', 0, 1)
        pdf.ln(10)
        
        if 'statistics' not in results:
            pdf.set_font('Arial', 'I', 12)
            pdf.cell(0, 10, 'No statistics available.', 0, 1)
            return
        
        # Add statistics text (simplified)
        stats_text = results['statistics']
        pdf.set_font('Arial', '', 10)
        
        # Split into lines and add to PDF
        lines = stats_text.split('\n')
        for line in lines[:50]:  # Limit to first 50 lines to avoid overflow
            if line.strip():
                # Clean up line
                clean_line = line.strip()
                if clean_line.startswith('#'):
                    # Handle headers
                    pdf.set_font('Arial', 'B', 12)
                    pdf.cell(0, 8, clean_line.lstrip('# '), 0, 1)
                    pdf.set_font('Arial', '', 10)
                elif clean_line.startswith('-'):
                    # Handle bullet points
                    pdf.cell(10)  # Indent
                    pdf.cell(0, 6, clean_line.lstrip('- '), 0, 1)
                else:
                    pdf.cell(0, 6, clean_line, 0, 1)
        
        pdf.ln(10)
    
    def _add_ai_insights(self, pdf, results):
        """Add AI insights section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '3. AI Insights & Analysis', 0, 1)
        pdf.ln(10)
        
        if 'ai_analysis' not in results or not results['ai_analysis']:
            pdf.set_font('Arial', 'I', 12)
            pdf.cell(0, 10, 'No AI analysis available.', 0, 1)
            return
        
        insights_text = results['ai_analysis']
        pdf.set_font('Arial', '', 10)
        
        # Split into sections
        sections = self._extract_sections(insights_text)
        
        for section_name, section_content in sections.items():
            if section_content.strip():
                # Section header
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 8, section_name, 0, 1)
                pdf.set_font('Arial', '', 10)
                
                # Section content
                lines = section_content.split('\n')
                for line in lines[:30]:  # Limit lines per section
                    if line.strip():
                        pdf.multi_cell(0, 6, line.strip())
                
                pdf.ln(5)
    
    def _extract_sections(self, text):
        """Extract sections from AI analysis text"""
        sections = {
            'Executive Summary': '',
            'Statistical Analysis': '',
            'Pattern Identification': '',
            'Business Implications': '',
            'Recommendations': ''
        }
        
        current_section = None
        lines = text.split('\n')
        
        for line in lines:
            line_stripped = line.strip()
            
            # Check for section headers
            if any(header in line_stripped.lower() for header in ['executive summary', 'summary']):
                current_section = 'Executive Summary'
                continue
            elif any(header in line_stripped.lower() for header in ['statistical analysis', 'detailed analysis']):
                current_section = 'Statistical Analysis'
                continue
            elif any(header in line_stripped.lower() for header in ['pattern identification', 'patterns']):
                current_section = 'Pattern Identification'
                continue
            elif any(header in line_stripped.lower() for header in ['business implications', 'implications']):
                current_section = 'Business Implications'
                continue
            elif any(header in line_stripped.lower() for header in ['recommendations', 'suggestions']):
                current_section = 'Recommendations'
                continue
            
            # Add content to current section
            if current_section and line_stripped:
                sections[current_section] += line + '\n'
        
        return sections
    
    def _add_visualizations(self, pdf, results):
        """Add visualizations section"""
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, '4. Key Visualizations', 0, 1)
        pdf.ln(10)
        
        visualizations = results['visualizations']
        added_viz = 0
        
        # Add key visualizations
        key_viz_names = ['data_types', 'correlation_heatmap', 'missing_data']
        
        for viz_name in key_viz_names:
            if viz_name in visualizations and added_viz < 3:  # Limit to 3 visualizations
                fig = visualizations[viz_name]
                image = self.convert_plotly_to_image(fig)
                
                if image:
                    # Resize image to fit PDF
                    max_width = 180
                    max_height = 120
                    image.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
                    
                    # Save image to bytes
                    img_buffer = BytesIO()
                    image.save(img_buffer, format='PNG')
                    img_buffer.seek(0)
                    
                    # Add image to PDF
                    pdf.set_font('Arial', 'B', 10)
                    pdf.cell(0, 8, viz_name.replace('_', ' ').title(), 0, 1, 'C')
                    
                    pdf.image(img_buffer, x=15, w=180)
                    pdf.ln(5)
                    
                    added_viz += 1
                    
                    # Add page break if we've added multiple visualizations
                    if added_viz % 2 == 0:
                        pdf.add_page()
    
    def generate_pdf_report(self, results, dataset_name, include_visualizations=True):
        """Main method to generate PDF report"""
        try:
            pdf_bytes = self.create_pdf_report(results, dataset_name)
            return pdf_bytes
        except Exception as e:
            print(f"Error in generate_pdf_report: {e}")
            raise